/*
 * Copyright (C) 2017 Eros Zanchetta <eros@sslmit.unibo.it>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui.panels;

import common.UriRedirect;
import common.Utils;
import gui.Main;
import gui.WizardStep;
import gui.dialogs.ConfirmDialog;
import gui.dialogs.GenericMessage;
import tools.urlcollector.GoogleScraper;
import java.awt.Component;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.tika.Tika;

/**
 *
 * @author Eros Zanchetta <eros@sslmit.unibo.it>
 */
public class ExternalBrowser extends WizardStep {

    private final MainPanel mainPanel;    
    private final Tika      tika;
    
    private boolean destinationFolderWarningDisplayed = false;
    
    private String blockingGetQueries;
    
    /**
     * Creates new form ExternalBrowser
     * 
     * @param stepNumber
     * @param name
     * @param mainPanel
     */
    public ExternalBrowser(int stepNumber, String name, MainPanel mainPanel) {        
        initComponents();
                
        this.mainPanel = mainPanel;
        this.setStepNumber(stepNumber);
        this.setName(name);
        
        // initializes tika, we'll use it to identify file mime type
        tika = new Tika();        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryTuplePanel = new javax.swing.JPanel();
        processResultsButton = new javax.swing.JButton();
        openAll = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(452, 366));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Click to open queries in a browser");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        queryTuplePanel.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(queryTuplePanel);

        processResultsButton.setText("Collect URLs");
        processResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processResultsButtonActionPerformed(evt);
            }
        });

        openAll.setText("Open All in Browser");
        openAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openAllActionPerformed(evt);
            }
        });

        jButton1.setText("Open Queries Folder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(openAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processResultsButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processResultsButton)
                    .addComponent(openAll)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processResultsButtonActionPerformed
        retrieveResults();
    }//GEN-LAST:event_processResultsButtonActionPerformed

    private void openAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openAllActionPerformed
        openAll();
    }//GEN-LAST:event_openAllActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Desktop.getDesktop().open(mainPanel.getPaths().getQueriesDir());
        } catch (IOException ex) {
            Logger.getLogger(Main.LOGNAME).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openAll;
    private javax.swing.JButton processResultsButton;
    private javax.swing.JPanel queryTuplePanel;
    // End of variables declaration//GEN-END:variables

    private void retrieveResults() {
        if (processResults(mainPanel, tika)) {
            getBlockingIssues().remove(Issues.GET_QUERIES);
            mainPanel.verifyNavigation();
            mainPanel.goToNextStep();
        }
        else {
            String msg = "No valid pages in 'queries' folder, make sure you saved queries in folder '" +
                    mainPanel.getPaths().getQueriesDir() +
                    "'" ;
            
            GenericMessage noPages = new GenericMessage(
                    mainPanel,
                    true,
                    msg,
                    GenericMessage.Type.ERROR,
                    mainPanel.getMain().redirectUrl(UriRedirect.HELP_EXTERNAL_BROWSER),
                    mainPanel.getPaths().getQueriesDir());
            noPages.setVisible(true);
        }        
    }
    
    @Override
    public void initializeIssues() {
        this.getBlockingIssues().put(Issues.GET_QUERIES, blockingGetQueries);
    }

    @Override
    public void reset() {
        initializeIssues();
    }

    @Override
    public void back() {
        
    }

    @Override
    public void onDisplay() {
        blockingGetQueries = "Open queries in a browser, save result pages to 'queries' "
                + "folder and then click on 'Collect URLs'";
        populateTupleQueries();
        this.initializeIssues();
        mainPanel.verifyNavigation();
    }

    @Override
    public void next() {
        
    }
    
    private void openAll() {
        // ask for confirtmation
        String msg = "Opening all queries at the same time might take a long time and "
                + "could possibily violate Google's Terms of use. <br /><br />Are you sure "
                + "you want to proceed?";

        ConfirmDialog confirm = new ConfirmDialog(mainPanel, true, msg, "Proceed?", ConfirmDialog.Type.WARNING);
        confirm.setVisible(true);

        if (confirm.getReturnStatus() == ConfirmDialog.RET_OK) {
            for (Component component : queryTuplePanel.getComponents()) {
                QueryUrlButton button = (QueryUrlButton) component;

                button.openUrl();
                button.setVisited();
            }
        }
    }
    
    
    private void populateTupleQueries() {
        HashMap<String, URL> tupleQueries = mainPanel.getProject().getExternalTupleUrls();
        
        /**
         * In order for the elements to be added correctly to the panel, I had to:
         * 
         * - set the layout of the container panel to GridLayout
         * - set the properties of the GridLayout to 1 column and 0 rows
         * - I still have no idea how to align the elements to the top :'( (but it is
         *   only relevant when there are less than 10 elements in the panel)
         */
        queryTuplePanel.removeAll();
        
        for(String key : tupleQueries.keySet()) {
            queryTuplePanel.add(new QueryUrlButton(key, tupleQueries.get(key), this));
        }
    }
    
    public static boolean processResults(MainPanel mainPanel, Tika tika) {
        File queriesDir = mainPanel.getPaths().getQueriesDir();
                
        // now intialize the scraper
        GoogleScraper scraper = new GoogleScraper();
        
        // initialize file writer
        File collectedUrlList   = mainPanel.getPaths().getCollectedUrlsFile();
        File cleanedUrlList     = mainPanel.getPaths().getCleanedUrlList();
        File editedUrlList      = mainPanel.getPaths().getFinalUrlList();
        
        BufferedWriter bw   = null;
        FileWriter fw       = null;
        
        boolean resultEmpty = true;
        
        try {
            fw = new FileWriter(collectedUrlList);
            bw = new BufferedWriter(fw);
            
            for (File file : queriesDir.listFiles()) {
                
                // skip dirs and non-html files
                if (file.isDirectory()) continue;
                
                String detectedMimeType = tika.detect(file);
                if (!detectedMimeType.equals("text/html") && !detectedMimeType.equals("application/x-webarchive")) {
                    System.err.println("Skipping " + file + ": mime type is '" + detectedMimeType + "'");
                    continue;
                }
                
                // now parse results of HTML pages, first convert TreeSet to string array
                TreeSet<String> excludedDomains = mainPanel.getProject().getExcludeDomains();
                
                String[] excluded = null;
                if (excludedDomains != null) {
                    ArrayList<String> excludedArray = new ArrayList<>(excludedDomains);
                    excluded = excludedArray.toArray(new String[excludedArray.size()]);                    
                } 

                for (String result : scraper.parseLocalGoogleFile2021(file, excluded)) {
                    bw.write(result + "\n");
                    System.out.println(result);
                }
                
                resultEmpty = false;
            }
                        
            bw.flush();
            fw.flush();
            bw.close();            
            fw.close();
            
            Utils.cleanAndRemoveDuplicateUrls(collectedUrlList, cleanedUrlList, editedUrlList);            
        } catch (IOException ex) {
            Logger.getLogger(Main.LOGNAME).log(Level.SEVERE, null, ex);
        }

        return !resultEmpty;
    }

    public MainPanel getMainPanel() {
        return mainPanel;
    }    
    
    public boolean isDestinationFolderWarningDisplayed() {
        return destinationFolderWarningDisplayed;
    }

    public void setDestinationFolderWarningDisplayed(boolean destinationFolderWarningDisplayed) {
        this.destinationFolderWarningDisplayed = destinationFolderWarningDisplayed;
    }    

    @Override
    public void save() {
    }
}

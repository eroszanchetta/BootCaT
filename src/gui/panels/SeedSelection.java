/*  This file is part of BootCaT frontend.
 *
 *  BootCaT frontend is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  BootCaT frontend is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BootCaT frontend.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package bootcat.gui.panels;

import bootcat.common.Utils;
import bootcat.gui.WizardStep;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.TreeSet;


/**
 *
 * @author Eros Zanchetta
 */
public class SeedSelection extends WizardStep {

    private final int       minNumberOfSeeds    = 5;
    private final String    blockingNoSeeds     = "Not enough seeds, type at least " + minNumberOfSeeds + " <strong>unique</strong> seeds in the box";
    private MainPanel       mainPanel;

    public SeedSelection(int stepNumber, String name, MainPanel mainPanel) {
        this();
        this.mainPanel = mainPanel;

        initializeIssues();

        this.setStepNumber(stepNumber);
        this.setName(name);
    }

    @Override
    public final void initializeIssues() {
//        this.getBlockingIssues().put(Issues.SEEDS_EDITING_DONE, blockingSeedsEditing);
        this.getBlockingIssues().put(Issues.NOT_ENOUGH_SEEDS, blockingNoSeeds);
    }

    @Deprecated
    public SeedSelection() {
        initComponents();
    }

    private TreeSet writeSeedsToFile() {
        String textAreaContent = seedInsertionArea.getText();

        File seeds = mainPanel.getPaths().getSeedsFile();

        // remove double quotes and convert newlines to unix
        textAreaContent = textAreaContent.replaceAll("\"", "");
        textAreaContent = textAreaContent.replaceAll("\r\n", "\n");

        // get rid of empty lines
        while (textAreaContent.contains("\n\n")) {
            textAreaContent = textAreaContent.replaceAll("\n\n", "\n");
        }

        // remove redundant whitespace and trim trailing space
        while (textAreaContent.contains("  ")) {
            textAreaContent = textAreaContent.replaceAll("  ", " ");
        }

        textAreaContent = textAreaContent.trim() + "\n";

        // put seeds in an array
        String[] seedArray = textAreaContent.split("\n");

        // remove duplicates, order will be preserved
        TreeSet<String> seedsSet = new TreeSet<>(Arrays.asList(seedArray));

        // write seeds to file
        FileOutputStream fos = null;

        try {
            fos = new FileOutputStream(seeds);
			OutputStreamWriter writer = new OutputStreamWriter(fos, mainPanel.getDefaultOutputCharset());
            
            for (String s : seedsSet) {
                writer.write(s.trim() + "\n");
            }

            writer.flush();
			writer.close();
        }

        catch (IOException ex) {
            ex.printStackTrace();
        }

        finally {
            try {
                fos.close();
            }
            catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        return seedsSet;
    }

    /**
     * Verify that there are enough seeds in the TextBox, note that
     * seeds must be unique (i.e. this will check for duplicates)
     */
    private void verifyNumberOfSeeds() {
        // complain if the number of seeds is too low
        String[] seeds = seedInsertionArea.getText().trim().split("\n");
        TreeSet<String> seedSet = new TreeSet<>(Arrays.asList(seeds));
        
        if (seedSet.size() < minNumberOfSeeds) {
            getBlockingIssues().put(Issues.NOT_ENOUGH_SEEDS, blockingNoSeeds);
            mainPanel.verifyNavigation();
        }
        else {
            getBlockingIssues().remove(Issues.NOT_ENOUGH_SEEDS);
            mainPanel.verifyNavigation();
            mainPanel.resetSubsequentSteps(this.getStepNumber());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        seedInsertionArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        cutButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(382, 346));
        setMinimumSize(new java.awt.Dimension(382, 346));
        setPreferredSize(new java.awt.Dimension(452, 366));

        seedInsertionArea.setColumns(20);
        seedInsertionArea.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        seedInsertionArea.setRows(5);
        seedInsertionArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seedInsertionAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(seedInsertionArea);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Insert one seed per line, multi-word seeds go on the same line");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);

        cutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/button-cut_16x16.png"))); // NOI18N
        cutButton.setText("Cut");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(cutButton);

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/button-copy_16x16.png"))); // NOI18N
        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(copyButton);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/button-paste_16x16.png"))); // NOI18N
        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(pasteButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void seedInsertionAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seedInsertionAreaKeyReleased
        verifyNumberOfSeeds();
    }//GEN-LAST:event_seedInsertionAreaKeyReleased

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        seedInsertionArea.append(Utils.getClipboardContent());
        verifyNumberOfSeeds();
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        Utils.setClipboardContents(seedInsertionArea.getText());
    }//GEN-LAST:event_copyButtonActionPerformed

    private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed
        Utils.setClipboardContents(seedInsertionArea.getText());
        seedInsertionArea.setText("");
        verifyNumberOfSeeds();
    }//GEN-LAST:event_cutButtonActionPerformed
    
    @Override
	public void back() {}

    @Override
    public void onDisplay() {}

    @Override
	public void next() {
    }

    @Override
    public void reset() {
        mainPanel.getPaths().getSeedsFile().delete();
        seedInsertionArea.setText(null);
		seedInsertionArea.setEnabled(true);

		initializeIssues();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton pasteButton;
    private javax.swing.JTextArea seedInsertionArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void save() {
        TreeSet seeds = writeSeedsToFile();
        mainPanel.getProject().setSeeds(seeds);
    }

}

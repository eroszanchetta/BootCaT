/*
 * Copyright (C) 2013 eros
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui.panels;

import common.UriRedirect;
import gui.WizardStep;
import common.Utils;
import gui.ProjectMode;
import gui.dialogs.GenericMessage;
import java.awt.Desktop;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FileUtils;
import org.apache.tika.Tika;

/**
 *
 * @author eros
 */
public class ModeChooser extends WizardStep {
    
    private MainPanel       mainPanel;
    private final String    blockingNoMode = "Choose an option";
    
    /**
     * Creates new form ModeChooser
     */
    public ModeChooser() {
        initComponents();
    }

    public ModeChooser (int stepNumber, String name, MainPanel mainPanel) {
        this();
        this.mainPanel = mainPanel;
        this.setStepNumber(stepNumber);
        this.setName(name);
        
        initializeIssues();
    }
    
    private void openModeHelp() {
        URI uri = URI.create(mainPanel.getMain().redirectUrl(UriRedirect.HELP_MODE));
        
        try {
            Desktop.getDesktop().browse(uri);
        } catch (IOException ex) {
            Logger.getLogger(ModeChooser.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        simpleModeButton = new javax.swing.JButton();
        customTuplesButton = new javax.swing.JButton();
        customUrlsButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        buildFromDirButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        localQueriesButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(452, 366));
        setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("How do you want to proceed?");
        add(jLabel1);
        jLabel1.setBounds(6, 6, 507, 16);

        simpleModeButton.setText("Simple mode");
        simpleModeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simpleModeButtonMouseClicked(evt);
            }
        });
        simpleModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleModeButtonActionPerformed(evt);
            }
        });
        add(simpleModeButton);
        simpleModeButton.setBounds(6, 40, 200, 38);

        customTuplesButton.setText("Custom tuples");
        customTuplesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customTuplesButtonActionPerformed(evt);
            }
        });
        add(customTuplesButton);
        customTuplesButton.setBounds(6, 84, 200, 37);

        customUrlsButton.setText("Custom URLs");
        customUrlsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customUrlsButtonActionPerformed(evt);
            }
        });
        add(customUrlsButton);
        customUrlsButton.setBounds(6, 127, 200, 37);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("<html><p>Choose seeds, build tuples etc.</p></html>");
        jLabel2.setToolTipText("Click here to get help");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        add(jLabel2);
        jLabel2.setBounds(212, 50, 301, 16);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setLabelFor(customTuplesButton);
        jLabel3.setText("<html><p>Manually enter tuples</p></html>");
        jLabel3.setToolTipText("Click here to get help");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        add(jLabel3);
        jLabel3.setBounds(212, 93, 301, 16);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("<html><p>Download and extract text from URL list</p></html>");
        jLabel4.setToolTipText("Click here to get help");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        add(jLabel4);
        jLabel4.setBounds(212, 136, 301, 16);

        helpButton.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/help_16x16.png"))); // NOI18N
        helpButton.setText("Help");
        helpButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        helpButton.setIconTextGap(10);
        helpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpButtonMouseClicked(evt);
            }
        });
        add(helpButton);
        helpButton.setBounds(6, 256, 200, 36);

        buildFromDirButton.setText("Local files");
        buildFromDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildFromDirButtonActionPerformed(evt);
            }
        });
        add(buildFromDirButton);
        buildFromDirButton.setBounds(6, 170, 200, 37);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("<html><p>Extract text from all files in a folder</p></html>");
        jLabel5.setToolTipText("Click here to get help");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        add(jLabel5);
        jLabel5.setBounds(212, 179, 301, 16);

        localQueriesButton.setText("Local queries");
        localQueriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localQueriesButtonActionPerformed(evt);
            }
        });
        add(localQueriesButton);
        localQueriesButton.setBounds(6, 213, 200, 37);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("<html><p>Extract URLs from saved Google queries</p></html>");
        jLabel6.setToolTipText("Click here to get help");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        add(jLabel6);
        jLabel6.setBounds(212, 222, 301, 16);
    }// </editor-fold>//GEN-END:initComponents

    private void customUrlsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customUrlsButtonActionPerformed
        mainPanel.resetStepOrder();
        mainPanel.getProject().setProjectMode(ProjectMode.CUSTOM_URLS, mainPanel);
        mainPanel.goToNextStep();
    }//GEN-LAST:event_customUrlsButtonActionPerformed

    private void simpleModeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simpleModeButtonMouseClicked

    }//GEN-LAST:event_simpleModeButtonMouseClicked

    private void helpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpButtonMouseClicked
        openModeHelp();
    }//GEN-LAST:event_helpButtonMouseClicked

    private void simpleModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleModeButtonActionPerformed
        mainPanel.resetStepOrder();
        mainPanel.getProject().setProjectMode(ProjectMode.STANDARD, mainPanel);
        mainPanel.goToNextStep();
    }//GEN-LAST:event_simpleModeButtonActionPerformed

    private void customTuplesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customTuplesButtonActionPerformed
        mainPanel.resetStepOrder();
        mainPanel.getProject().setProjectMode(ProjectMode.CUSTOM_TUPLES, mainPanel);
        mainPanel.goToNextStep();
    }//GEN-LAST:event_customTuplesButtonActionPerformed

    private void buildFromDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildFromDirButtonActionPerformed
        boolean retVal = buildLocalUrlList();
        
        if (retVal) {
            mainPanel.resetStepOrder();
            mainPanel.getProject().setProjectMode(ProjectMode.LOCAL_FILES, mainPanel);
            mainPanel.goToNextStep();
        }
        else {
            String msg = "Could not find any supported files in selected folder";
            GenericMessage dialog = new GenericMessage(mainPanel, true, msg, GenericMessage.Type.ERROR);
            dialog.setVisible(true);
        }        
    }//GEN-LAST:event_buildFromDirButtonActionPerformed

    private void localQueriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localQueriesButtonActionPerformed
        // initialize Tika, we'll use it to identify mime types
        Tika tika = new Tika();
        boolean retVal = scrapeQueriesFromLocalDir(tika);
        
        if (retVal) {
            mainPanel.resetStepOrder();
            mainPanel.getProject().setProjectMode(ProjectMode.LOCAL_QUERIES, mainPanel);
            mainPanel.goToNextStep();            
        }
        else {
            String msg = "Could not find any saved Google result pages in selected folder";
            GenericMessage dialog = new GenericMessage(mainPanel, true, msg, GenericMessage.Type.ERROR);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_localQueriesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildFromDirButton;
    private javax.swing.JButton customTuplesButton;
    private javax.swing.JButton customUrlsButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton localQueriesButton;
    private javax.swing.JButton simpleModeButton;
    // End of variables declaration//GEN-END:variables
    
    private boolean scrapeQueriesFromLocalDir(Tika tika) {
        
        JFileChooser fc = new JFileChooser();
                
		// set initial directory for file chooser to user's home directory
        File currentDir = FileSystemView.getFileSystemView().getDefaultDirectory();
        fc.setCurrentDirectory(currentDir);
        
		// set filechooser options
		fc.setMultiSelectionEnabled(false);
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        fc.setDialogTitle("Select folder containing downloaded Google queries");
        
		// open the dialog
		int retVal = fc.showOpenDialog(this);
        
        if (retVal == JFileChooser.CANCEL_OPTION) return false;
        
		if (fc.getSelectedFile() != null) {            
            try {
                // copy all files in source directory to destination directory
                Collection<File> files = FileUtils.listFiles(fc.getSelectedFile(), null, false);
                for (File sourceFile : files) {

                    // only copy html and x-webarchive files
                    String detectedMimeType = tika.detect(sourceFile);
                    if (detectedMimeType.equals("text/html") || detectedMimeType.equals("application/x-webarchive")) {      
                        File destFile = new File(mainPanel.getPaths().getQueriesDir().getPath() + File.separator + sourceFile.getName());
                        FileUtils.copyFile(sourceFile, destFile);
                    }
                }
                
                // now scrape results
                return ExternalBrowser.processResults(mainPanel, tika);                
            } catch (IOException ex) {
                Logger.getLogger(ModeChooser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return false;
    }
        
    private boolean buildLocalUrlList() {
        boolean urlListIsNotNull = false;
        
        JFileChooser fc = new JFileChooser();
                
		// set initial directory for file chooser to user's home directory
        File currentDir = FileSystemView.getFileSystemView().getDefaultDirectory();
        fc.setCurrentDirectory(currentDir);
        
		// set filechooser options
		fc.setMultiSelectionEnabled(false);
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        fc.setDialogTitle("Select folder containing downloaded pages");
        
		// open the dialog
		int retVal = fc.showOpenDialog(this);
        
        if (retVal == JFileChooser.CANCEL_OPTION) return false;
        
		if (fc.getSelectedFile() != null) {
            File sourceDir  = fc.getSelectedFile();
            
			File generatedFileList = null;
            try {
                generatedFileList = File.createTempFile("BootCat", ".txt");
            } catch (IOException ex) {
                Logger.getLogger(ModeChooser.class.getName()).log(Level.SEVERE, null, ex);
            }
                        
            Collection<File> files = FileUtils.listFiles(sourceDir, null, false);
                        
            try {
                FileWriter writer = new FileWriter(generatedFileList);

                for (File file : files) {
                    
                    if (file.isHidden()) continue;
                                        
                    writer.append(file.toURI().toString());
                    writer.append(System.lineSeparator());
                    urlListIsNotNull = true;
                }
                
                writer.close();
            } catch (IOException ex) {
                    Logger.getLogger(ModeChooser.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            File destFile1  = mainPanel.getPaths().getFinalUrlList();
            File destFile2  = mainPanel.getPaths().getCleanedUrlList();
            File destFile3  = mainPanel.getPaths().getCollectedUrlsFile();
            
            try {
                Utils.copyFile(generatedFileList, destFile1);
                Utils.copyFile(generatedFileList, destFile2);
                Utils.copyFile(generatedFileList, destFile3);
            }
            catch (IOException ex) {
                Logger.getLogger(CorpusBuilder.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            return urlListIsNotNull;
		}
        
		else return false;        
    }
    
    @Override
    public final void initializeIssues() {
        this.getBlockingIssues().put(Issues.NO_MODE, blockingNoMode);
    }

    @Override
    public void reset() {}

    @Override
    public void back() {}

    @Override
    public void onDisplay() {

    }

    @Override
    public void next() {}

    @Override
    public void save() {
    }
}
